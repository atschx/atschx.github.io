---
author: Albert
comments: true
date: 2014-01-05 15:33:24+00:00
layout: post
title: 控制反转,依赖注入
categories:
- 速度改变一切
tags:
- DI
- IOC
---

[**控制反转**](http://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC)（Inversion of Control，缩写为**IoC**），是[面向对象编程](http://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B)中的一种设计原则，可以用来减低计算机代码之间的[耦合度](http://zh.wikipedia.org/wiki/%E8%80%A6%E5%90%88%E5%BA%A6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8))。其中最常见的方式叫做**依赖注入**（Dependency Injection，简称**DI**），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。

实现控制反转主要有两种方式：依赖注入和依赖查找。两者的区别在于，前者是被动的接收对象，在类A的实例创建过程中即创建了依赖的B对象，通过类型或名称来判断将不同的对象注入到不同的数属性中，而后者是主动索取响应名称的对象，获得依赖对象的时间也可以在代码中自由控制。


### 依赖注入


依赖注入有如下实现方式：
	
  * 基于接口。实现特定接口以供外部容器注入所依赖类型的对象。
  * 基于 set 方法。实现特定属性的public set方法，来让外部容器调用传入所依赖类型的对象。
  * 基于构造函数。实现特定参数的构造函数，在新建对象时传入所依赖类型的对象。
  * 基于注解。基于Java的注解功能，在私有变量前加“@Autowired”等注解，不需要显式的定义以上三种代码，便可以让外部容器传入对应的对象。该方案相当于定义了public的set方法，但是因为没有真正的set方法，从而不会为了实现依赖注入导致暴露了不该暴露的接口（因为set方法只想让容器访问来注入而并不希望其他依赖此类的对象访问）。


### 依赖查找


依赖查找更加主动，在需要的时候通过调用框架提供的方法来获取对象，获取时需要提供相关的配置文件路径、key等信息来确定获取对象的状态

本文来源于维基百科


